Location:
  _class: dtrpg.core.map.Location
  travel_actions: [ TravelAction ]
  optional local_actions: [ Action ]

Market:
  _class: dtrpg.core.map.Market
  _base: Location
  required offers: [ TradeOffer ]

TradeOffer:
  _class: dtrpg.core.item.TradeOffer
  optional buy_value: int
  optional sell_value: int
  required resource: Resource
  required item: Item

Action:
  _class: dtrpg.core.events.Action
  optional costs: [ ResourceCost ]
  optional args: { str: type }
  required event: Event

Event:
  _class: dtrpg.core.events.Event
  _abstract: True

ResourceChangesEvent:
  _class: dtrpg.core.events.ResourceChangesEvent
  _base: Event
  required resource_changes: [ ResourceChange ]

ResourceChangeEventResult:
  _class: dtrpg.core.events.ResourceChangeEventResult

ItemReceiveEvent:
  _class: dtrpg.core.item.ItemReceiveEvent
  _base: Event
  required item_factory: ItemStackFactory

ItemReceivedEventResult:
  _class: dtrpg.core.item.ItemReceivedEventResult

TravelAction:
  _class: dtrpg.core.map.TravelAction
  required to: Location

TravelEvent:
  _class: dtrpg.core.map.TravelEvent
  _base: Event
  required to: Location

TravelEventResult:
  _class: dtrpg.core.map.TravelEventResult

InfoEvent:
  _class: dtrpg.core.events.InfoEvent
  _base: Event

SequenceEvent:
  _class: dtrpg.core.events.SequenceEvent
  _base: Event
  required events: [ Event ]

SequenceEventResult:
  _class: dtrpg.core.events.SequenceEventResult

RemoveItemEvent:
  _class: dtrpg.core.item.RemoveItemEvent
  _base: Event
  optional item: Item
  optional number: int

OffersInfoAction:
  _class: dtrpg.core.events.OffersInfoAction
  _base: Action

OffersInfoEvent:
  _class: dtrpg.core.events.OffersInfoEvent
  _base: Event

OffersInfoEventResult:
  _class: dtrpg.core.events.OffersInfoEventResult

BuyAction:
  _class: dtrpg.core.events.BuyAction
  _base: Action

BuyEvent:
  _class: dtrpg.core.events.BuyEvent
  _base: Event

BuyEventResult:
  _class: dtrpg.core.events.BuyEventResult

SellAction:
  _class: dtrpg.core.events.SellAction
  _base: Action

SellEvent:
  _class: dtrpg.core.events.SellEvent
  _base: Event

SellEventResult:
  _class: dtrpg.core.events.SellEventResult

SkillTestEvent:
  _class: dtrpg.core.events.SkillTestEvent
  _base: Event
  required success: Event
  required failure: Event
  required test: SkillTest

FighterFactory:
  _class: dtrpg.core.creature.FighterFactory
  _abstract: True
  optional resource_factories: [ CreatureResourceFactory ]
  optional skill_factories: [ CreatureSkillFactory ]
  optional statistic_factories: [ StatisticFactory ]
  required tactic: Tactic

PlayerFactory:
  _class: dtrpg.core.creature.PlayerFactory
  _base: FighterFactory
  required default_location: Location
  required container_factory: ContainerFactory
  optional base_actions: [ Action ]
  required default_attack: Attack
  optional on_killed: Event

NPCFighterFactory:
  _class: dtrpg.core.creature.NPCFighterFactory
  _base: FighterFactory
  required attack: Attack

Player:
  _class: dtrpg.core.creature.Player

Container:
  _class: dtrpg.core.item.Container

ContainerFactory:
  _class: dtrpg.core.item.ContainerFactory
  required max_items: int

Item:
  _class: dtrpg.core.item.Item
  optional max_stack: int

ItemStackFactory:
  _class: dtrpg.core.item.ItemStackFactory
  required item: Item
  optional stack: int

CreatureResourceFactory:
  _class: dtrpg.core.creature.CreatureResourceFactory
  required resource: Resource
  optional initial: int
  optional max: int
  optional base_gen_rate: float
  optional clock: Clock

CreatureSkillFactory:
  _class: dtrpg.core.creature.CreatureSkillFactory
  required skill: Skill
  optional initial: int

Skill:
  _class: dtrpg.core.creature.Skill
  required progression: str
  required experience_from_test: str

SkillTest:
  _class: dtrpg.core.creature.SkillTest
  required skill: Skill
  required difficulty: int
  required tester: Tester

Statistic:
  _class: dtrpg.core.creature.Statistic

CreatureStatistic:
  _class: dtrpg.core.creature.CreatureStatistic

StatisticFactory:
  _class: dtrpg.core.creature.StatisticFactory
  required statistic: Statistic
  optional base: int

Resource:
  _class: dtrpg.core.creature.Resource
  optional vital: bool

CreatureResource:
  _class: dtrpg.core.creature.CreatureResource

ResourceChange:
  _class: dtrpg.core.creature.ResourceChange
  required resource: Resource
  required value: int
  optional op: ResourceChangeOp

ResourceChangeOp:
  _class: dtrpg.core.creature.ResourceChangeOp
  _enum: True

ResourceCost:
  _class: dtrpg.core.creature.ResourceCost
  required resource: Resource
  required cost: int

Config:
  _class: dtrpg.core.Config
  required player_factory: PlayerFactory

Clock:
  _class: dtrpg.core.Clock
  optional base: int

Tester:
  _class: dtrpg.core.Tester
  _abstract: True

ProportionalTester:
  _class: dtrpg.core.ProportionalTester
  _base: Tester

DifferentialTester:
  _class: dtrpg.core.DifferentialTester
  _base: Tester
  
  optional const: int
  optional perc_limit: int

ThresholdTester:
  _class: dtrpg.core.ThresholdTester
  _base: Tester

FightEngine:
  _class: dtrpg.core.fighting.FightEngine
  required health: Resource
  optional health_low_threshold: float
  required speed_skill: Skill
  required move_tester: Tester
  optional time_limit: int

Tactic:
  _class: dtrpg.core.fighting.Tactic
  optional move_predicates: [ MovePredicate ]
  optional action_predicates: [ ActionPredicate ]

MovePredicate:
  _class: dtrpg.core.fighting.TacticPredicate
  optional conditions: [ TacticCondition ]
  required result: MoveDestination

ActionPredicate:
  _class: dtrpg.core.fighting.TacticPredicate
  optional conditions: [ TacticCondition ]
  required result: FightAction

FightAction:
  _class: dtrpg.core.fighting.FightActions
  _enum: True

TacticCondition:
  _class: dtrpg.core.fighting.TacticCondition
  required quantifier: TacticQuantifier
  required condition: StatusFlag

TacticQuantifier:
  _class: dtrpg.core.fighting.TacticQuantifier
  _enum: True

StatusFlag:
  _class: dtrpg.core.fighting.StatusFlag
  _enum: True

MoveDestination:
  _class: dtrpg.core.fighting.MoveDestination
  _enum: True

Attack:
  _class: dtrpg.core.fighting.Attack
  optional ranged: bool
  optional attacks_number: int
  required hit_skill: Skill
  required evasion_skill: Skill
  optional hit_skill_modifier: int
  optional evasion_skill_modifier: int
  required tester: Tester
  optional on_hit: Event
  optional on_miss: Event

Damage:
  _class: dtrpg.core.fighting.Damage
  _base: Event
  optional damage_tests_number: int
  required damage_test_mod: int
  required damage_per_hit: int
  required damaged_resource: Resource
  required armor: Statistic
  required tester: Tester

FightEvent:
  _base: Event
  _class: dtrpg.core.fighting.FightEvent
  optional victory: Event
  optional defeat: Event
  optional draw: Event
  required enemy_factories: [ NPCFighterFactory ]
  required fight_engine: FightEngine

FightEventResult:
  _class: dtrpg.core.fighting.FightEventResult

MoveEventResult:
  _class: dtrpg.core.fighting.MoveEventResult

AttackEventResult:
  _class: dtrpg.core.fighting.AttackEventResult

DefeatedEventResult:
  _class: dtrpg.core.fighting.DefeatedEventResult
